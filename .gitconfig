[include]
  path = ~/.gitconfig.local
[includeIf "gitdir:~/src/github.com/"]
  path = ~/src/github.com/.gitconfig
[color]
	ui = auto
[alias]
  c = commit -v
  co = !git branch | peco | xargs git checkout
  co-remote = '! f() { git fetch --depth=1 origin $1 && git checkout -b $1 FETCH_HEAD; }; f '
  cb = checkout -b
  st = status
  br = branch
  p = !git push origin `git rev-parse --abbrev-ref HEAD`
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lga = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  tr = log --graph --pretty='format:%C(yellow)%h%Creset %s %Cgreen(%an)%Creset %Cred%d%Creset'
  today = !git log --since=midnight --oneline
  n  = now --all --stat
  d = "!git branch --merged|egrep -v '\\*|develop|master'|xargs git branch -d"
  modified = diff --diff-filter=M
  deleted = diff --diff-filter=D
  diff = diff --color | diff-so-fancy
  sorttime = "!git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:iso8601)%09%(refname)' refs/heads"
  # TODOコメント表示
  todo = !"git diff origin/master...HEAD | grep -E 'TODO' -C5"
  # FIXMEコメント表示(TODOも表示)
  fixme = !"git diff origin/master...HEAD | grep -E 'TODO|FIXME' -C5"
  # 最近コミットしたブランチを表示
  recent = for-each-ref --format='%(refname:short)' --sort=-committerdate refs/heads
  # カレントブランチ
  current-branch = rev-parse --abbrev-ref HEAD
  # pull req ブランチを手元にpull
  fetch-pulls = fetch origin +refs/pull/*:refs/remotes/pull/*
  # pullする前に変更を調べる
  pull-dry-run  = !"git fetch origin; B=$(git rev-parse --abbrev-ref HEAD); git diff --stat --summary ${B}..origin/${B}"
  # diff only extension
  diffe = !git diff HEAD --name-only | sed 's/.*\\.//' | sort | uniq
  # 現在のブランチ名
  current = symbolic-ref --short HEAD
  # show conflict files
  conflicts = '!git ls-files -u | cut -f 2 | sort -u'
  # set-upstream
  setupst=!"git branch --set-upstream-to=origin/$(git current) $(git current)"
  # alias一覧 TODO:動いてない
  alias = !"if test -z $1; then loop=; for k in `git config --get-regexp ^alias\\. | sort | sed -e 's/^alias\\.\\(\\S*\\).*/\\1/g'`; do echo -n $k; loop="${loop}1"; if test ${#loop} -lt 5; then echo -n '\t'; else echo; loop=; fi; done; exit; fi; git config --list | grep ^alias\\.$1= | sed -e s/^alias\\.//; exit;"
[filter "media"]
	clean = !git-media-clean %f
	smudge = !git-media-smudge %f
[core]
	excludesfile = ~/.gitignore_global
	editor = /Applications/MacVim.app/Contents/MacOS/Vim
  pager = less
[diff]
	tool = diffphp
[difftool "diffphp"]
  # 動いてない
  cmd = \"colordiff\" -wBI \"^\\s*\\/\" \"$LOCAL\" \"$REMOTE\"
  prompt = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
[mergetool "sourcetree"]
	cmd = /opt/homebrew-cask/Caskroom/sourcetree/2.2.4/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[credential]
	helper = osxkeychain
[commit]
  # 常にやるのは重いのでエイリアスで明示的にcommit -vする
  #verbose = true
[rebase]
	autosquash = true
[merge]
  # トピックブランチで行った変更を見やすくするため常にno-ff
	ff = false
[pull]
  # マージコミットを作らないようにno-ffのマージを禁止
  ff = only
  # マージコミットを作らないようにrebaseでpull
  rebase = true
[tig "bind"]
  generic = g move-first-line
  generic = G move-last-line
[ghq]
  root = ~/src
[init]
	templatedir = $HOME/.git_template/
[http]
	postBuffer = 524288000
