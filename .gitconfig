[include]
  path = ~/.gitconfig.osx
  path = ~/.gitconfig.local
[color]
  ui = auto
[filter "media"]
  clean = !git-media-clean %f
  smudge = !git-media-smudge %f
[core]
  excludesfile = ~/.gitignore_global
  editor = vim
  pager = less
  quotepath = false
[commit]
#	verbose = true
[rebase]
  autosquash = true
[merge]
  # トピックブランチで行った変更を見やすくするため常にno-ff
  ff = false
[pull]
  # マージコミットを作らないようにno-ffのマージを禁止
  ff = only
  # マージコミットを作らないようにrebaseでpull
  rebase = true
[tig "bind"]
  generic = g move-first-line
  generic = G move-last-line
[ghq]
  root = ~/src
[credential "https://source.developers.google.com"]
  helper = gcloud.sh
[url "git@gitlab.com:"]
  insteadOf = https://gitlab.com/
[url "ssh://git@github.com/"]
	insteadOf = https://github.com/
[status]
  submoduleSummary = true

[init]
	defaultBranch = main

[diff "sopsdiffer"]
	textconv = sops -d

[alias]
  # commit messageの自動生成つきcommit
  c = "!f() { \
    TMP_MSG=$(mktemp); \
    PROMPT='Generate a well-structured Git commit message based on the code changes.\n\n## Commit Types\n- feat: Introduces a new feature\n- fix: Fixes a bug\n- docs: Updates or improves documentation\n- refactor: Improves code structure without changing behavior\n- perf: Enhances performance\n- test: Adds or updates tests\n- chore: Updates build processes or development tools\n\n## Commit Message Format\n- **First line:** {Type of change}: A concise summary (≤ 50 characters)\n- **Second line:** (Leave blank)\n- **Third line and beyond:** A detailed explanation (what changed and why)'; \
    if ! git diff --cached | claude -p \"$PROMPT\" > \"$TMP_MSG\"; then \
      echo \"# ❌ claude failed. Please write your commit message manually.\" > \"$TMP_MSG\"; \
    fi; \
    git commit -v -e -F \"$TMP_MSG\"; \
    rm -f \"$TMP_MSG\"; \
  }; f"
  # manual commit
  cm = commit -v

  s = switch
  sc = switch -c
  st = status
  br = branch
  rs = restore

  cds = !"cd $(git submodule | fzf | awk '{print $2}')"

  cd = !"if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then cd `pwd`/`git rev-parse --show-cdup`; fi"

  # ブランチを選択してswitchする
  sw = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git switch $(echo $branch | sed 's#remotes/[^/]*/##'); else git switch $args; fi }; f"

  # 差分を選択してaddする
  da = !git d | xargs git add --

  # 差分を選択してadd -pする
  dap = "!f() { for f in $(git d); do git add -p -- $f; done }; f"

  # 差分を選択してresetする
  dr = !git d | xargs git reset --

  # 差分を選択してHEADにcheckoutする
  dch = !git d | xargs git checkout HEAD

  # スタッシュのリストを表示する
  stl = !git stash list | fzf --preview 'echo {} | grep -o stash@{.*} | xargs git stash show -p --color=always' --height 90% | grep -o stash@{.*}

  # スタッシュを選択してapplyする
  sta = !git stl | xargs git stash apply

  # スタッシュを選択してdropする
  std = !git stl | xargs git stash drop
  
  p = !git push origin `git rev-parse --abbrev-ref HEAD`
  pf = !git push --force-with-lease --force-if-includes origin `git rev-parse --abbrev-ref HEAD`

  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

  lga = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

  tr = log --graph --pretty='format:%C(yellow)%h%Creset %s %Cgreen(%an)%Creset %Cred%d%Creset'

  today = !git log --since=midnight --oneline

  n  = now --all --stat
  
  # ファイルの差分をプレビュー付きで確認する
  d = "!f() { args=$@; [ -z \"$args\" ] && args=HEAD; ([ \"$args\" = \"HEAD\" ] && git status --short || git diff --name-status $args | sed 's/\t/  /') | fzf --preview \"echo {} | cut -c 4- | xargs git diff --color=always $args --\" --multi --height 90% | cut -c 4-; }; f"

  # ブランチを選択して削除する
  bd = "!f() { \
  branch=$(git branch --format='%(refname:short)' | grep -vE '^(\\*|develop|master)$' | fzf --preview 'git log --color=always {}'); \
  [ -n \"$branch\" ] && git branch -d \"$branch\"; \
}; f"
  
  modified = diff --diff-filter=M
  deleted = diff --diff-filter=D
  diff = diff --color | diff-so-fancy
  sorttime = "!git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:iso8601)%09%(refname)' refs/heads"

  # TODOコメント表示
  todo = !"git diff origin/$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')...HEAD | grep -E 'TODO' -C5"

  # 最近コミットしたブランチを表示
  recent = for-each-ref --format='%(refname:short)' --sort=-committerdate refs/heads

  # カレントブランチ
  current-branch = rev-parse --abbrev-ref HEAD

  # pull req ブランチを手元にpull
  fetch-pulls = fetch origin +refs/pull/*:refs/remotes/pull/*

  # pullする前に変更を調べる
  pull-dry-run  = !"git fetch origin; B=$(git rev-parse --abbrev-ref HEAD); git diff --stat --summary ${B}..origin/${B}"

  # diff only extension
  diffe = !git diff HEAD --name-only | sed 's/.*\\.//' | sort | uniq

  # 現在のブランチ名
  current = symbolic-ref --short HEAD

  # show conflict files
  conflicts = '!git ls-files -u | cut -f 2 | sort -u'

  # set-upstream
  setupst=!"git branch --set-upstream-to=origin/$(git current) $(git current)"

  alias = !git config --list | grep ^alias\\.
 
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[user]
	name = Takuma Kajikawa
	email = kj1ktk@gmail.com
